# Generated by Django 3.2 on 2021-06-10 15:12

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("tag", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="HemontikaUser",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="auth.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Story",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=50)),
                ("front_img", models.ImageField(blank=True, null=True, upload_to="")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField()),
                (
                    "author",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="literature.hemontikauser"),
                ),
                ("tags", models.ManyToManyField(blank=True, to="tag.Tag")),
            ],
            options={
                "verbose_name_plural": "Stories",
            },
        ),
        migrations.CreateModel(
            name="Poem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=50)),
                ("front_img", models.ImageField(blank=True, null=True, upload_to="")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField()),
                (
                    "author",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="literature.hemontikauser"),
                ),
                ("tags", models.ManyToManyField(blank=True, to="tag.Tag")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Novel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=50)),
                ("front_img", models.ImageField(blank=True, null=True, upload_to="")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("number_of_chapters", models.PositiveIntegerField(default=0)),
                (
                    "author",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="literature.hemontikauser"),
                ),
                ("tags", models.ManyToManyField(blank=True, to="tag.Tag")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=50)),
                ("front_img", models.ImageField(blank=True, null=True, upload_to="")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField()),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="literature.hemontikauser",
                    ),
                ),
                (
                    "novel",
                    models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to="literature.novel"),
                ),
                (
                    "previous_chapter",
                    models.OneToOneField(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_chapter",
                        to="literature.chapter",
                    ),
                ),
                ("tags", models.ManyToManyField(blank=True, to="tag.Tag")),
            ],
            options={
                "ordering": ["date"],
            },
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=50)),
                ("front_img", models.ImageField(blank=True, null=True, upload_to="")),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("number_of_contents", models.PositiveIntegerField(default=0)),
                (
                    "author",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="literature.hemontikauser"),
                ),
                ("novels", models.ManyToManyField(blank=True, to="literature.Novel")),
                ("poems", models.ManyToManyField(blank=True, to="literature.Poem")),
                ("stories", models.ManyToManyField(blank=True, to="literature.Story")),
                ("tags", models.ManyToManyField(blank=True, to="tag.Tag")),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
